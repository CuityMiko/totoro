#!/usr/bin/env node

var fs = require('fs')
var path = require('path')
var commander = require('commander')
var colorful = require('colorful')
var utilx = require('utilx')

var Client = require('../index')
var pkg = require('../package')

commander
  .description(pkg.description)
  .option('-v, --version', 'output version number')
  .option('-d, --debug', 'show debug log')
  .option('-R, --runner [s]', 'runner path or any info required when run the test')
  .option('-C, --code [s]', 'single expression or file path to run')
  .option('-l, --labors [s]', 'labors run the test, split by comma', utilx.split)
  .option('-a, --adapter [s]', 'report adapter')
  .option('-c, --charset [s]', 'charset')
  .option('-t, --timeout [n]', 'server timeout, in minute')
  .option('-O, --root [s]', 'client server root')
  .option('-H, --host [s]', 'specify server host')
  .option('-P, --port [n]', 'specify server port')
  .option('--no-proxy', 'don\'t proxy option --data if it is a url')
  .option('--no-coverage', 'skip coverage')
  .on('version', function() {
    console.log()
    console.log('  ' + colorful.cyan(pkg.version))
    console.log()
    process.exit(0)
  }).on('--help', function() {
    console.log(colorful.green('  Examples:'))
    console.log('    $ totoro')
    console.log('    $ totoro --runner=url/to/runner')
    console.log('    $ totoro --code=document.getElementsByClassName')
    console.log()
  }).helpInformation = utilx.cGetHelp(pkg)


commander.command('config')
  .description('Get and set global options')
  .option('-H, --host [s]', 'set or get server host')
  .option('-P, --port [n]', 'set or get erver port')
  .action(function(cmd) {
    cmd = arguments[arguments.length - 1]
    cmd.parse(process.argv)
    Client.config(utilx.cGetCfg(cmd))
  }).on('--help', function() {
    console.log(colorful.green('  Examples:'))
    console.log('    $ totoro config --host=0.0.0.0')
    console.log('    $ totoro config --host=""')
    console.log('    $ totoro config')
    console.log()
  }).helpInformation = utilx.cGetHelp(pkg)

commander.command('list')
  .description('View available browsers')
  .option('-H, --host [s]', 'specify server host')
  .option('-P, --port [n]', 'specify server port')
  .action(function(cmd, options) {
    Client.list(utilx.cGetCfg(commander))
  }).helpInformation = utilx.cGetHelp(pkg)


// listen before parse
commander.parse(process.argv)


if (commander.rawArgs.indexOf('list') < 0 && commander.rawArgs.indexOf('config') < 0 ) {
  new Client(utilx.cGetCfg(commander))
}


